// Generated by CoffeeScript 1.9.0
(function() {
  var ALPHABET, CSS_COLOR_NAMES, EXERCICES, FUNCTION, color_tab, debug, delay, id, interval, lambda_exemples, parentheses, speed, var_tab, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  interval = function(ms, func) {
    return setInterval(func, ms);
  };

  CSS_COLOR_NAMES = ["Blue", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "Yellow", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGrey", "DeepPink", "DeepSkyBlue", "DimGray", "DimGrey", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Grey", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGray", "LightGrey", "LightGreen", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSlateGrey", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "Red", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "SlateGrey", "Snow", "SpringGreen", "SteelBlue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "YellowGreen"];

  FUNCTION = {
    "ZERO": "(λf.λx.x)",
    "ONE": "(λf.λx.(f x))",
    "TWO": "(λf.λx.(f(f x)))",
    "THREE": "(λf.λx.(f(f(f x))))",
    "FOUR": "(λf.λx.(f(f(f(f x)))))",
    "FIVE": "(λf.λx.((f(f(f(f x))))))",
    "SUCC": "(λn.λf.λx.f (n f x))",
    "PLUS": "(λm.λn.λf.λx.m f (n f x))",
    "MULT": "(λm.λn.λf.m (n f))",
    "POW": "(λb.λe.e b)",
    "PRED": "(λa.λf.λx.a (λg.λh.h (g f)) (λu.x) (λu.u))",
    "SUB": " (λm.λa. (a  (λn.λf.λx. n (λg.λh.h (g f)) (λu.x) (λu.u))) m) ",
    "TRUE": "(λx.λy.x)",
    "FALSE": "(λx.λy.y)",
    "AND": "(λp.λq.p q p)",
    "OR": "(λp.λq.p p q)",
    "NOT": "(λp.λa.λb.p b a)",
    "IFTHENELSE": "(λp.λa.λb.p a b)",
    "ISZERO": "(λn.n (λx.(λx.λy.y)) (λx.λy.x))",
    "LEQ": "(λm.λn.(λp.p (λx.(λx.λy.y)) (λx.λy.x)) ((λq.λr.r (λr.λf.λx.r (λg.λh.h (g f)) (λu.x) (λu.u)) q) m n))"
  };

  lambda_exemples = ["(λx.x) (λy.y)", "(λx.λy.x) (λy.y)", "((λy.y) (λz.z))(λx.x)", "(λx.λy. x) a b", "(λx.λy. y) a b", "(λa. a (λm.(λn. n ))(λp.(λq. p )))(λx.λy. y) a b", "(λx.x x) (λx.x x)", "λy.((λx.y (x x)) (λx.y (x x)))", "(λa.λs.λz.s (a s z)) (λs.λz.z) ", "(λa.λb.λs.λz.(a s (b s z))) (λs.λz.(s z)) (λs.λz.(s z))", "(λa.λb.λs.λz.(a s (b s z))) (λs.λz.(s (s (s z)))) (λs.λz.(s (s (s (s z)))))"];

  EXERCICES = {
    "0": {
      "titre": 'Tutoriel : "Le vieil alligator & les oeufs"',
      "texte": "<p>Voilà un vieil alligator avec des oeufs ! Le vieil alligator n'a plus faim, il a assez mangé.</p><p>Tous ce qu'il fait, c'est prendre soins de sa famille : ici ce sont des oeufs !</p><p>Les oeufs vont éclorent et donner de nouvelles familles d'alligators.</p><p>Fais glisser un vieil alligator dans le panel, puis fais glisser le premier oeuf sur le bout de la queue. Enfin, un à un, glisse des oeufs les uns sur les autres pour les ajouter !</p>",
      "contenu-exercice": "(f g h i i )",
      "contenu-eleve": "",
      "solution": "(f g h i i ) "
    },
    "1": {
      "titre": 'Tutoriel : "Les alligators affamés"',
      "texte": "<p>Voilà des alligators affamés...Les alligators affamés ont faim. Ils vont manger tout ce qui est en face d'eux! Mais ils sont aussi des alligators responsables, et comme les vieux alligators, ils gardent leurs familles.</p><p>Allez fais glisser !</p>",
      "contenu-exercice": "λx.(λy.(λz.() ) ) ",
      "contenu-eleve": "",
      "solution": "λx.(λy.(λz.() ) ) "
    },
    "2": {
      "titre": 'Tutoriel 1 - Les familles"',
      "texte": "<p>Voici une petite famille : un alligator garde son oeuf !</p><p>Peux tu la recréer ?</p>",
      "contenu-exercice": "λe.e",
      "contenu-eleve": "",
      "solution": "λe.(e ) "
    },
    "3": {
      "titre": 'Tutoriel 1 - Les familles"',
      "texte": "<p>Voici une petite famille un peu plus grande.</p><p>Un alligator garde un autre alligator qui gardent deux oeufs. Ou tu pourrez dire qu'un alligator garder un autre alligator qui est gardien des deux oeufs.</p><p>Peux tu la recréer ?</p>",
      "contenu-exercice": "λe.λf.e f",
      "contenu-eleve": "",
      "solution": "λe.(λf.(e f ) ) "
    },
    "4": {
      "titre": 'Tutoriel 1 - Les familles"',
      "texte": "<p>Voici une enorme famille ! Nous avons un alligator jaune, vert et rouge qui gardent cette famille . Ils gardent trois choses: un oeuf vert, un vieux crocodile , et un oeuf rouge. Le vieil alligator, lui, garde un œuf jaune et un oeuf vert.</p><p>Notez que les œufs n'utilisent que les couleurs des alligators qui les surveillent . Vous ne pouvez pas avoir un œuf bleu sans qu'il y ait un alligator bleu autour pour le garder.</p><p>Peux tu la recréer ?</p>",
      "contenu-exercice": "λh.λe.λf.(e (h e) f)",
      "contenu-eleve": "",
      "solution": "λh.(λe.(λf.(e (h e ) f ) ) ) "
    }
  };

  ALPHABET = "abcdefghijklmnopqrstuvwxyz";

  _ref = [[], {}, false, true, 0, 0], color_tab = _ref[0], var_tab = _ref[1], debug = _ref[2], speed = _ref[3], id = _ref[4], parentheses = _ref[5];

  $(function() {
    var get_lambda_from, initialize_html, inserer, inserer_direct, insert_exp_into_div, make_dropped_droppable;
    (initialize_html = function() {
      var color, html, i, index, key, letter, value, _i, _j, _k, _len, _len1, _ref1, _ref2;
      for (key in EXERCICES) {
        $('#exercices').append("<button class='panel-button exercice'  data-id='" + key + "'>Ex" + key + "</button>");
      }
      _ref1 = ALPHABET.slice(0, 26);
      for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
        letter = _ref1[index];
        color_tab.push(CSS_COLOR_NAMES[index]);
        var_tab["" + letter] = CSS_COLOR_NAMES[index];
      }
      $.get("css/svg/egg.svg", function(rawSvg) {
        $("#egg-svg").append(document.importNode(rawSvg.documentElement, true));
        return $("#egg-svg svg")[0].setAttribute('viewBox', '0 0 116 80');
      }, "xml");
      $.get("css/svg/open.svg", function(rawSvg) {
        $("#open-svg").append(document.importNode(rawSvg.documentElement, true));
        return $("#open-svg svg")[0].setAttribute('viewBox', '-25 0 330 150');
      }, "xml");
      $.get("css/svg/vieux.svg", function(rawSvg) {
        $("#vieux-svg").append(document.importNode(rawSvg.documentElement, true));
        return $("#vieux-svg svg")[0].setAttribute('viewBox', '0 0 228 78');
      }, "xml");
      html = "";
      for (i = _j = 0, _ref2 = lambda_exemples.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
        html += "<button id='ex-" + i + "' class='panel-button' data-type='exemple' data-numero='" + i + "'>" + i + "</button>";
      }
      $("#draw").after(html + "<br>");
      html = "";
      for (key in FUNCTION) {
        value = FUNCTION[key];
        html += "<button id='" + key + "' class='panel-button' data-type='fonction' data-lambda='" + value + "'>" + key + "</button>";
      }
      $("#panel-variable").after(html);
      html = "";
      for (index = _k = 0, _len1 = color_tab.length; _k < _len1; index = ++_k) {
        color = color_tab[index];
        html += "<div id='" + color + "' class='color' style='background-color:" + color + ";' data-color='" + color + "' data-variable='" + ALPHABET[index] + "'>" + ALPHABET[index] + "</div>";
      }
      $("#items").before(html);
      $(".item").draggable({
        helper: "clone",
        start: function(event, ui) {
          return $(ui.helper).addClass("ui-draggable-helper");
        },
        stop: function(event, ui) {
          return $(this).show();
        }
      });
      return $("#game-container").dialog({
        show: {
          effect: 'fade',
          duration: 2000
        },
        hide: "size",
        width: "100%",
        draggable: false,
        height: Math.floor(100 * $(window).height() / 100),
        open: function() {
          return $("body").addClass("stop-scrolling");
        },
        close: function() {
          return $("body").removeClass("stop-scrolling");
        }
      });
    })();
    $(".color").on("click", function() {
      var color, variable, _ref1;
      _ref1 = [$(this).attr("data-color"), $(this).attr("data-variable")], color = _ref1[0], variable = _ref1[1];
      $("#choose-color").attr("data-variable", variable);
      $("#choose-color").attr("data-color", color);
      $("#panel-lambda").attr("data-variable", variable).html("λ" + variable);
      $("#panel-variable").attr("data-variable", variable).html("" + variable);
      $("#egg-svg, #open-svg").find(".skin").css("fill", color);
      $(".color").removeClass("selected-color");
      return $(this).addClass("selected-color");
    });
    $(".color:first").trigger('click');
    $(".panel-button").on("click", function() {
      var e, index, letter, _i, _len, _ref1, _results;
      switch ($(this).attr("data-type")) {
        case "lambda":
          return $("#prompt").val($("#prompt").val() + ("λ" + ($(this).attr('data-variable')) + "."));
        case "variable":
          return $("#prompt").val($("#prompt").val() + (" " + ($(this).attr('data-variable')) + " "));
        case "open":
          return $("#prompt").val($("#prompt").val() + "(");
        case "close":
          return $("#prompt").val($("#prompt").val() + ")");
        case "draw":
          e = jQuery.Event("keypress");
          e.which = 13;
          return $('#prompt').trigger(e);
        case "clear":
          parentheses = 0;
          $("#root").empty().append("<div id='root_definition' class='definition_drop'></div>");
          $("#prompt").val("");
          return make_dropped_droppable();
        case "exemple":
          $("#prompt").val(lambda_exemples[$(this).attr("data-numero")]);
          e = jQuery.Event("keypress");
          e.which = 13;
          return $('#prompt').trigger(e);
        case "fonction":
          return $("#prompt").val($("#prompt").val() + " " + $(this).attr("data-lambda"));
        case "autoclose":
          parentheses = 0;
          _ref1 = $("#prompt").val();
          for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
            letter = _ref1[index];
            switch (letter) {
              case "(":
                parentheses += 1;
                break;
              case ")":
                parentheses -= 1;
            }
          }
          if (parentheses < 0) {
            return alert("il y a " + parentheses + " parenthese(s) fermée en trop !)");
          } else {
            _results = [];
            while (parentheses > 0) {
              $("#prompt").val($("#prompt").val() + ")");
              _results.push(parentheses -= 1);
            }
            return _results;
          }
          break;
        case "speed":
          $(this).html(speed ? "slow" : "fast");
          return speed = !speed;
        case "read":
          return $("#prompt").val(get_lambda_from($("#root")));
      }
    });
    get_lambda_from = function(root) {
      var exp;
      exp = root.clone();
      exp.find("svg").remove();
      exp.find(".definition_drop").remove();
      exp.find(".application_drop").remove();
      exp = exp.html();
      exp = exp.replace(/<div id="\d*" class="variable dropped" data-variable="(\w+)" data-color="\w+"[ style="opacity: 1;"]*>\s*<\/div>/g, "$1 ");
      exp = exp.replace(/<div id="\d*" class="lambda dropped" data-variable="(\w+)" data-color="\w+"[ style="opacity: 1;"]*>/g, "λ$1.(");
      exp = exp.replace(/<div id="\d*" class="lambda priorite dropped" data-variable="\(" data-color="white"[ style="opacity: 1;"]*>/g, "(");
      return exp = exp.replace(/<\/div>/g, ") ");
    };
    insert_exp_into_div = function(exp, root) {
      var current_index, expression, local_debug, reg, λ_index, λ_variable;
      expression = exp;
      id = 0;
      expression = expression.replace(/([.( ])([a-z])/g, "$1woot$2");
      local_debug = false;
      while (expression.match(/λ/)) {
        λ_index = 0;
        while (expression[λ_index] !== "λ") {
          λ_index += 1;
        }
        λ_variable = λ_index + 1;
        current_index = λ_index + 3;
        switch (expression[λ_index - 1]) {
          case "(":
            if (local_debug) {
              alert("prototype : (λx. lambda ) = " + expression);
            }
            parentheses = 1;
            while ((parentheses > 0) && (current_index < expression.length) && (expression[current_index] !== "<")) {
              switch (expression[current_index]) {
                case "(":
                  parentheses += 1;
                  break;
                case ")":
                  parentheses -= 1;
              }
              current_index += 1;
            }
            if (local_debug) {
              alert("I got this : " + (expression.substring(λ_index - 1, current_index)));
            }
            expression = expression.replace(expression.substring(λ_index - 1, current_index), "<div id='' class='lambda dropped' data-variable='" + expression[λ_variable] + "' data-color=''>" + (expression.substring(λ_index + 3, current_index - 1)) + "</div>");
            continue;
          default:
            switch (expression[current_index]) {
              case "(":
                if (local_debug) {
                  alert("prototype : λx.(lambda) = " + expression);
                }
                parentheses = 1;
                while ((parentheses > 0) && (current_index < expression.length) && (expression[current_index] !== "<")) {
                  current_index += 1;
                  switch (expression[current_index]) {
                    case "(":
                      parentheses += 1;
                      continue;
                    case ")":
                      parentheses -= 1;
                      continue;
                    default:
                      continue;
                  }
                }
                if (local_debug) {
                  alert("I got this : " + (expression.substring(λ_index, current_index + 1)));
                }
                expression = expression.replace(expression.substring(λ_index, current_index + 1), "<div id='' class='lambda dropped' data-variable='" + expression[λ_variable] + "' data-color=''>" + (expression.substring(λ_index + 4, current_index)) + "</div>");
                continue;
              default:
                if (local_debug) {
                  alert("prototype : λx.lambda = " + expression);
                }
                while ((expression[current_index] !== "<") && (current_index < expression.length)) {
                  current_index += 1;
                }
                if (local_debug) {
                  alert("I got this : " + (expression.substring(λ_index, current_index)));
                }
                expression = expression.replace(expression.substring(λ_index, current_index), "<div id='' class='lambda dropped' data-variable='" + expression[λ_variable] + "' data-color=''>" + (expression.substring(λ_index + 3, current_index)) + "</div>");
                continue;
            }
        }
      }
      expression = expression.replace(/[ ]*\(([^)]*\s?\)*)\)[ ]*/g, "<div id='' class='lambda priorite dropped' data-variable='parenthese' data-color='white' >$1</div>");
      expression = expression.replace(/\(/g, "<div id='' class='lambda priorite dropped' data-variable='parenthese' data-color='white'>");
      expression = expression.replace(/\)/g, "</div>");
      expression = expression.replace(/parenthese/g, "(");
      reg = /woot(\w)/g;
      expression = expression.replace(reg, "<div id='' class='variable dropped' data-variable='$1' data-color='' ></div>");
      if (expression.match(/\?/)) {
        expression = expression.replace(/\?/, "<div class='definition_drop'></div>");
      }
      expression = $('<div/>').html(expression).contents();
      root.empty().append($(expression));
      make_dropped_droppable();
      return $(root).find(".dropped").each(function() {
        var variable;
        $(this).attr("id", "" + (id += 1));
        if (($(this).hasClass("lambda")) && ($(this).hasClass("priorite"))) {
          return $("#vieux-svg").clone().contents().prependTo($(this));
        } else {
          variable = $(this).attr("data-variable");
          $(this).attr("data-color", "" + var_tab[variable]);
          if ($(this).hasClass("variable")) {
            $("#egg-svg").find(".skin").css("fill", $(this).attr("data-color"));
            return $("#egg-svg").clone().contents().prependTo($(this));
          } else {
            $("#open-svg").find(".skin").css("fill", $(this).attr("data-color"));
            return $("#open-svg").clone().contents().prependTo($(this));
          }
        }
      });
    };
    $('#prompt').keypress(function(key) {
      if (key.which === 13) {
        return insert_exp_into_div($("#prompt").val(), $("#root"));
      }
    });
    inserer_direct = function(symbole, droppable, mode) {
      var classe, color, lambda, type, _ref1, _ref2, _ref3;
      switch (symbole) {
        case "(":
          _ref1 = ["white", "lambda priorite", ".lambda.priorite"], color = _ref1[0], type = _ref1[1], classe = _ref1[2];
          lambda = $('<div/>').html("<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + symbole + "' data-color='" + color + "' ></div>").contents();
          $("#vieux-svg").clone().contents().prependTo($(lambda));
          break;
        default:
          if (ALPHABET.indexOf(symbole) > -1) {
            _ref2 = ["" + var_tab[symbole[0]], "variable", ".variable"], color = _ref2[0], type = _ref2[1], classe = _ref2[2];
            $("#egg-svg").find(".skin").css("fill", color);
            lambda = $('<div/>').html("<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + symbole[0] + "' data-color='" + color + "' ></div>").contents();
            $("#egg-svg").clone().contents().prependTo($(lambda));
          } else {
            _ref3 = ["" + var_tab[symbole[1]], "lambda", ".lambda"], color = _ref3[0], type = _ref3[1], classe = _ref3[2];
            $("#open-svg").find(".skin").css("fill", color);
            lambda = $('<div/>').html("<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + symbole[1] + "' data-color='" + color + "' ></div>").contents();
            $("#open-svg").clone().contents().prependTo($(lambda));
          }
      }
      if (mode === "definition") {
        return droppable = droppable.append($(lambda)).children(classe).first();
      } else {
        return droppable = droppable.after($(lambda)).next(classe);
      }
    };
    inserer = function(draggable, droppable) {
      var color, lambda, type, variable, _ref1, _ref2;
      if (draggable.hasClass("vieux-croco")) {
        _ref1 = ["(", "white"], variable = _ref1[0], color = _ref1[1];
      } else {
        _ref2 = [$("#choose-color").attr("data-variable"), $("#choose-color").attr("data-color")], variable = _ref2[0], color = _ref2[1];
      }
      if (draggable.hasClass("egg")) {
        type = "variable";
      } else if (draggable.hasClass("croco")) {
        type = "lambda";
      } else {
        type = "lambda priorite";
      }
      lambda = "<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + variable + "' data-color='" + color + "' ><div class='application_drop'></div></div>";
      lambda = $('<div/>').html(lambda).contents();
      if (type !== "variable") {
        $(lambda).prepend("<div class='definition_drop'></div>");
      }
      switch (type) {
        case "variable":
          $("#egg-svg").find(".skin").css("fill", color);
          $("#egg-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda":
          $("#open-svg").find(".skin").css("fill", color);
          $("#open-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda priorite":
          $("#vieux-svg").clone().contents().prependTo($(lambda));
      }
      if (droppable.hasClass("definition_drop")) {
        droppable.before($(lambda));
      } else {
        droppable.parent().after($(lambda));
      }
      return droppable.remove();
    };
    make_dropped_droppable = function() {
      return $(".application_drop, .definition_drop").droppable({
        hoverClass: "ui-state-hover",
        accept: ".item",
        drop: function(event, ui) {
          inserer(ui.draggable, $(this));
          return make_dropped_droppable();
        }
      });
    };
    make_dropped_droppable();
    $("#go").on("click", function() {
      var ahead_vars, application, applicationClone, bust_a_move, color_rule_check, decapsule, delta, local_debug, pointer, stay, variable;
      local_debug = false;
      delta = speed ? 0 : 4000;
      ahead_vars = [];
      $(".application_drop, .definition_drop").remove();
      $("#root").find(".dropped").each(function() {
        id += 1;
        return $(this).attr("id", id);
      });
      pointer = $("#root > .lambda:first");
      stay = true;
      decapsule = function(pointer) {
        var fragment;
        fragment = document.createDocumentFragment();
        while (pointer[0].firstChild) {
          fragment.appendChild(pointer[0].firstChild);
        }
        pointer[0].parentNode.replaceChild(fragment, pointer[0]);
        return pointer[0] = $(pointer).find("svg").first().remove()[0];
      };
      while (stay) {
        if (local_debug) {
          alert("stay for a loop");
        }
        if (pointer.hasClass("priorite")) {
          if (local_debug) {
            alert("Croco blanc !");
          }
          switch (pointer.children(":not(svg)").length) {
            case 1:
              pointer.find("svg").first().find("g#layer1").attr("transform", "rotate(180,140,65)");
              if (!speed) {
                alert("Ce vieil alligator ne sert plus à rien !");
              }
              pointer.find("> svg").remove();
              decapsule(pointer);
              continue;
            default:
              if (pointer.find(".lambda").length > 0) {
                pointer = pointer.find(".lambda").first();
              } else {
                pointer = pointer.next();
              }
              continue;
          }
        }
        if ((pointer.hasClass("lambda")) && (!pointer.hasClass("priorite"))) {
          if (local_debug) {
            alert("Croco " + (pointer.attr('data-variable')) + " !");
          }
          ahead_vars.push(pointer.attr("data-variable"));
          switch (pointer.next().length) {
            case 0:
              if (local_debug) {
                alert("has nothing to eat...go deeper");
              }
              if (pointer.find(".lambda").length > 0) {
                pointer = pointer.find(".lambda").first();
                continue;
              } else {
                if (local_debug) {
                  "nothing to eat, no deeper lambda...over !";
                }
                stay = false;
                continue;
              }
              break;
            default:
              if ((pointer.next().hasClass("priorite")) && (pointer.next().find(".lambda:not(.priorite)").next().length > 0)) {
                pointer = pointer.next();
                continue;
              } else {
                stay = false;
                continue;
              }
          }
        }
        if (pointer.hasClass("variable")) {
          ahead_vars.push(pointer.attr("data-variable"));
          if (local_debug) {
            alert("Oeuf " + (pointer.attr('data-variable')) + " !");
          }
          pointer = pointer.next();
          continue;
        }
        if (local_debug) {
          alert("no if detected. breakin' !");
        }
        stay = false;
      }
      if ((pointer.hasClass("lambda")) && (pointer.attr("data-color") !== "white") && (pointer.next().length > 0)) {
        ahead_vars.pop();
        variable = pointer.attr("data-variable");
        application = pointer.next();
        (color_rule_check = function(pointer, application) {
          var $var, application_vars, closestCommonAncestor, common_ancestor, find_tree, function_vars, get_vars, i, index, intersect, intersection, item, j, palette, used_vars, _i, _len;
          closestCommonAncestor = function(a, b) {
            return a.parents().has(b).first();
          };
          get_vars = function(tree) {
            var palette;
            palette = [];
            tree.find("[data-variable]").andSelf().filter("[data-variable]").not(".lambda.priorite").each(function() {
              var _ref1;
              if (_ref1 = $(this).data("variable"), __indexOf.call(ahead_vars, _ref1) < 0) {
                return palette.push($(this).data("variable"));
              }
            });
            return palette.unique();
          };
          find_tree = function(element, racine_id) {
            var i, tree;
            i = element.attr("id");
            return tree = $("#" + racine_id).find(".dropped").has("#" + i);
          };
          common_ancestor = closestCommonAncestor(pointer, application);
          i = "#" + (pointer.attr('id'));
          j = "#" + (application.attr('id'));
          common_ancestor = common_ancestor.clone();
          common_ancestor.find(i).remove();
          common_ancestor.find(j).remove();
          if (common_ancestor.attr("id") !== "root") {
            common_ancestor.find("[data-variable]").andSelf().filter("[data-variable]").not(".lambda.priorite").each(function() {
              return ahead_vars.push($(this).attr("data-variable"));
            });
          }
          ahead_vars = ahead_vars.unique();
          function_vars = get_vars(pointer);
          application_vars = get_vars(application);
          intersect = function(a, b) {
            return a.filter(function(n) {
              return b.indexOf(n) !== -1;
            });
          };
          intersection = intersect(application_vars, function_vars);
          if (intersection.length) {
            used_vars = function_vars.concat(application_vars.concat(ahead_vars.concat)).unique();
            palette = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = ALPHABET.length; _i < _len; _i++) {
                item = ALPHABET[_i];
                if (__indexOf.call(used_vars, item) < 0) {
                  _results.push(item);
                }
              }
              return _results;
            })();
            palette = palette.slice(0, +(intersection.length - 1) + 1 || 9e9);
            if (!speed) {
              alert("Règle de la couleur !(Color rule)");
            }
            for (index = _i = 0, _len = intersection.length; _i < _len; index = ++_i) {
              $var = intersection[index];
              application.find("[data-variable='" + $var + "']").andSelf().filter("[data-variable='" + $var + "']").each(function() {
                var _ref1;
                if (_ref1 = $(this).attr("data-variable"), __indexOf.call(ahead_vars, _ref1) < 0) {
                  $(this).attr("data-variable", palette[index]);
                  return $(this).find("> svg").find(".skin").css("fill", var_tab[palette[index]]);
                }
              });
            }
            if (!speed) {
              return alert("C'est vu ?");
            }
          }
        })(pointer, application);
        applicationClone = application.clone();
        (bust_a_move = function(p, timer, j) {
          var bustit;
          bustit = interval(50, function() {
            return p.children("svg").css({
              "z-index": "9000"
            }).find("#jaw").attr("transform", "rotate(" + (-10 + Math.floor(6 * Math.cos(j++))) + ") translate(-100,20)");
          });
          return delay(timer, function() {
            clearInterval(bustit);
            pointer.children("svg").find("g#layer1").attr("transform", "rotate(180 125 75)");
            return pointer.children("svg").animate({
              "opacity": 0
            }, delta, function() {
              return $(this).closest("svg").remove();
            });
          });
        })(pointer, delta, 0);
        application.css('visibility', 'hidden').clone().prependTo(pointer).css({
          "z-index": "-1",
          border: "dashed black 1px",
          visibility: "visible",
          position: "absolute",
          top: "0px",
          left: "100%"
        }).animate({
          "min-width": "0px",
          padding: "0px",
          height: '1vw',
          width: "1vw",
          top: "0",
          left: "60%"
        }, delta, function() {
          var eggs, n;
          $(this).find("> svg").remove();
          $(this).remove();
          application.find("> svg").remove();
          application.remove();
          eggs = pointer.find(".variable[data-variable=" + variable + "]");
          n = eggs.length;
          if (n > 0) {
            return eggs.each(function(index, element) {
              $(this).after(applicationClone.clone().css({
                opacity: 0
              }).animate({
                opacity: 1
              }, delta, function() {
                if (index === n - 1) {
                  pointer.find("> svg").remove();
                  return decapsule(pointer);
                }
              }));
              return $(this).animate({
                opacity: 0
              }, delta, function() {
                $(this).find("> svg").remove();
                return $(this).remove();
              });
            });
          } else {
            if (!speed) {
              alert("Aucun oeuf !(no egg)");
            }
            pointer.find("> svg").remove();
            return decapsule(pointer);
          }
        });
        return $("#root").children("svg").remove();
      }
    });
    $("#console").toggle();
    $("#toggle-console").on("click", function() {
      return $("#console").toggle();
    });
    $("#exercice").hide();
    $(".exercice").on("click", function() {
      var exo, i;
      i = $(this).attr("data-id");
      exo = EXERCICES[i];
      $("#exercice > .panel-button.exercice").attr("data-id", i);
      $("#exercice").attr("data-solution", exo["solution"]);
      $("#exercice > .titre").html("<h1>" + exo['titre'] + "</h1>");
      $("#exercice > .texte").html("<p>" + exo['texte'] + "</p>");
      if (exo["contenu-eleve"] !== "") {
        insert_exp_into_div(exo["contenu-eleve"], $("#root"));
      } else {
        $("#root").empty().append("<div id='root_definition' class='definition_drop'></div>");
      }
      if (exo["contenu-exercice"] !== "") {
        insert_exp_into_div(exo["contenu-exercice"], $("#contenu-exercice"));
      }
      return $("#exercice").show().draggable();
    });
    $("#exercice > .check").on("click", function() {
      var local_debug, resultat, solution;
      local_debug = true;
      solution = $("#exercice").attr("data-solution");
      resultat = get_lambda_from($("#root"));
      if (resultat === solution) {
        return alert("Super ! Si tu as tout compris, passe à l'exo suivant. Sinon rejoue !");
      } else {
        alert("Raté ! Essaye encore, n'oublie pas de cliquer sur 'rejouer'");
        if (local_debug) {
          return alert("[debug soluce : " + solution + " ; eleve : " + resultat + "]");
        }
      }
    });
    $("#play").on("click", function() {
      return $("#game-container").dialog("open");
    });
    return $(".run-previous-code").on("click", function() {
      var js;
      js = CoffeeScript.compile($(this).prev(":first").text());
      return eval(js);
    });
  });

}).call(this);
