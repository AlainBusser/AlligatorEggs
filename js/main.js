// Generated by CoffeeScript 1.9.0
(function() {
  var ALPHABET, CSS_COLOR_NAMES, color_tab, debug, delay, id, interval, lambda_exemples, nb_exemple, var_tab, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Array.prototype.unique = function() {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[this[key]] = this[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  interval = function(ms, func) {
    return setInterval(func, ms);
  };

  CSS_COLOR_NAMES = ["Blue", "BlueViolet", "Brown", "BurlyWood", "CadetBlue", "Chartreuse", "Chocolate", "Coral", "CornflowerBlue", "Cornsilk", "Crimson", "Cyan", "DarkBlue", "DarkCyan", "DarkGoldenRod", "DarkGray", "DarkGreen", "DarkKhaki", "DarkMagenta", "DarkOliveGreen", "Darkorange", "DarkOrchid", "DarkRed", "DarkSalmon", "DarkSeaGreen", "DarkSlateBlue", "DarkSlateGray", "DarkSlateGrey", "DarkTurquoise", "DarkViolet", "DeepPink", "DeepSkyBlue", "DimGray", "DimGrey", "DodgerBlue", "FireBrick", "FloralWhite", "ForestGreen", "Fuchsia", "Gainsboro", "GhostWhite", "Gold", "GoldenRod", "Gray", "Grey", "Green", "GreenYellow", "HoneyDew", "HotPink", "IndianRed", "Indigo", "Ivory", "Khaki", "Lavender", "LavenderBlush", "LawnGreen", "LemonChiffon", "LightBlue", "LightCoral", "LightCyan", "LightGoldenRodYellow", "LightGray", "LightGrey", "LightGreen", "LightPink", "LightSalmon", "LightSeaGreen", "LightSkyBlue", "LightSlateGray", "LightSlateGrey", "LightSteelBlue", "LightYellow", "Lime", "LimeGreen", "Linen", "Magenta", "Maroon", "MediumAquaMarine", "MediumBlue", "MediumOrchid", "MediumPurple", "MediumSeaGreen", "MediumSlateBlue", "MediumSpringGreen", "MediumTurquoise", "MediumVioletRed", "MidnightBlue", "MintCream", "MistyRose", "Moccasin", "NavajoWhite", "Navy", "OldLace", "Olive", "OliveDrab", "Orange", "OrangeRed", "Orchid", "PaleGoldenRod", "PaleGreen", "PaleTurquoise", "PaleVioletRed", "PapayaWhip", "PeachPuff", "Peru", "Pink", "Plum", "PowderBlue", "Purple", "Red", "RosyBrown", "RoyalBlue", "SaddleBrown", "Salmon", "SandyBrown", "SeaGreen", "SeaShell", "Sienna", "Silver", "SkyBlue", "SlateBlue", "SlateGray", "SlateGrey", "Snow", "SpringGreen", "SteelBlue", "Tan", "Teal", "Thistle", "Tomato", "Turquoise", "Violet", "Wheat", "White", "WhiteSmoke", "Yellow", "YellowGreen"];

  lambda_exemples = ["(λx.x) (λy.y)", "(λx.λy.x) (λy.y)", "((λy.y) (λz.z))(λx.x)", "(λx.λy. x) a b", "(λx.λy. y) a b", "(λa. a (λm.(λn. n ))(λp.(λq. p )))(λx.λy. y) a b", "(λx.x x) (λx.x x)", "λy.(λx.y (x x)) (λx.y (x x))", "(λa.λs.λz.s (a s z)) (λs.λz.z) ", "(λa.λb.λs.λz.(a s (b s z))) (λs.λz.(s z)) (λs.λz.(s z))", "(λa.λb.λs.λz.(a s (b s z))) (λs.λz.(s (s (s z)))) (λs.λz.(s (s (s (s z)))))"];

  ALPHABET = "abcdefghijklmnopqrstuvwxyz";

  color_tab = [];

  var_tab = {};

  nb_exemple = 9;

  _ref = [true, 1000], debug = _ref[0], id = _ref[1];

  $(function() {
    var color, expression, html, i, index, inserer, inserer_direct, key, letter, make_dropped_droppable, parentheses, speed, value, _i, _j, _k, _len, _len1, _ref1, _ref2, _ref3;
    _ref1 = ALPHABET.slice(0, 26);
    for (index = _i = 0, _len = _ref1.length; _i < _len; index = ++_i) {
      letter = _ref1[index];
      color_tab.push(CSS_COLOR_NAMES[index]);
      var_tab["" + letter] = CSS_COLOR_NAMES[index];
    }
    $.get("css/img/egg.svg", function(rawSvg) {
      var importedSVGRootElement;
      importedSVGRootElement = document.importNode(rawSvg.documentElement, true);
      $("#egg-svg").hide().append(importedSVGRootElement);
      return $("#egg-svg svg")[0].setAttribute('viewBox', '0 0 116 80');
    }, "xml");
    $.get("css/img/open.svg", function(rawSvg) {
      var importedSVGRootElement;
      importedSVGRootElement = document.importNode(rawSvg.documentElement, true);
      $("#open-svg").hide().append(importedSVGRootElement);
      return $("#open-svg svg")[0].setAttribute('viewBox', '-25 0 300 150');
    }, "xml");
    $.get("css/img/vieux.svg", function(rawSvg) {
      var importedSVGRootElement;
      importedSVGRootElement = document.importNode(rawSvg.documentElement, true);
      $("#vieux-svg").hide().append(importedSVGRootElement);
      return $("#vieux-svg svg")[0].setAttribute('viewBox', '0 0 228 78');
    }, "xml");
    html = "";
    for (key in var_tab) {
      value = var_tab[key];
      html += "<button class='panel-button' data-type='lambda' data-variable='" + key + "'>λ" + key + "</button>";
    }
    html += "<br>";
    for (key in var_tab) {
      value = var_tab[key];
      html += "<button class='panel-button' data-type='variable' data-variable='" + key + "'>" + key + "</button>";
    }
    $("#lambda-panel").append(html);
    html = "<br>";
    for (i = _j = 0, _ref2 = lambda_exemples.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
      html += "<button id='ex-" + i + "' class='panel-button' data-type='exemple' data-numero='" + i + "'>Ex " + i + "</button>";
    }
    $("#lambda-panel").append(html);
    $("#lambda-panel").dialog({
      width: "auto"
    });
    $("#prompt-mode").on("click", function() {
      return $("#lambda-panel").dialog("open");
    });
    for (_k = 0, _len1 = color_tab.length; _k < _len1; _k++) {
      color = color_tab[_k];
      $("#choose-color").append("<div class='color' style='background-color:" + color + ";' data-color='" + color + "'></div>");

      /*html = 
      """
        <img src='css/img/vieil-alligator-#{color}.png'/>
        <img src='css/img/alligator-#{color}.png' />
        <img src='css/img/egg-#{color}.png' />
      """
      $( "#preloaded-images" ).append html
       */
    }
    $(".color").on("click", function() {
      $("#choose-color").data("color", $(this).data("color"));
      $(".color").removeClass("selected-color");
      return $(this).addClass("selected-color");
    });
    $(".item").draggable({
      helper: "clone"
    });
    inserer = function(draggable, droppable) {
      var lambda, type, variable;
      variable = draggable.hasClass("vieux-croco") ? 'white' : $("#choose-color").attr("data-color");
      if (draggable.hasClass("egg")) {
        type = "variable";
      } else if (draggable.hasClass("croco")) {
        type = "lambda";
      } else {
        type = "lambda priorite";
      }
      lambda = "<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + variable + "' ><div class='application_drop'></div></div>";
      lambda = $('<div/>').html(lambda).contents();
      if (type !== "variable") {
        $(lambda).prepend("<div class='definition_drop'></div>");
      }
      switch (type) {
        case "variable":
          $("#egg-svg").find(".skin").css("fill", variable);
          $("#egg-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda":
          $("#open-svg").find(".skin").css("fill", variable);
          $("#open-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda priorite":
          $("#vieux-svg").clone().contents().prependTo($(lambda));
      }
      if (droppable.hasClass("definition_drop")) {
        droppable.before($(lambda));
      } else {
        droppable.parent().after($(lambda));
      }
      return droppable.remove();
    };
    make_dropped_droppable = function() {
      return $(".application_drop, .definition_drop").droppable({
        hoverClass: "ui-state-hover",
        accept: ".croco, .vieux-croco, .egg",
        drop: function(event, ui) {
          inserer(ui.draggable, $(this));
          return make_dropped_droppable();
        }
      });
    };
    make_dropped_droppable();
    speed = false;
    $("#go").on("click", function() {
      var ahead_color, application, applicationClone, bust_a_move, color_rule_check, current_color, delta, pointer, variable;
      delta = speed ? 500 : 4000;
      $(".application_drop, .definition_drop").remove();
      ahead_color = ['white'];
      pointer = $("#root > .lambda:first");
      while (!pointer.next(":not(svg)").length || pointer.data("variable") === 'white') {
        current_color = pointer.data("variable");
        ahead_color.push(current_color);
        if (pointer.data("variable") !== "white") {
          pointer = pointer.find(".lambda").first();
          if (!pointer.length) {
            if (!speed) {
              alert("Là ça change pas !");
            }
            break;
          }
        } else {
          if (pointer.children(":not(svg)").length === 1) {
            pointer.children("svg").find("g#layer1").attr("transform", "rotate(180,140,65)");
            if (!speed) {
              alert("Oh il ne sert plus à rien le pauvre !");
            }
            pointer.children().unwrap().siblings("svg").remove();
            pointer = $("#root > .lambda:first");
          } else {
            pointer = pointer.find(".lambda").first();
          }
        }
      }
      ahead_color = ahead_color.unique();
      variable = pointer.data("variable");
      color_rule_check = function(func, app) {
        var app_colors, app_items, difference, func_colors, get_colors, item, new_color, used_colors, _l, _len2, _len3, _m, _results;
        get_colors = function(tree) {
          var palette;
          palette = [];
          tree.find("[data-variable]").andSelf().filter("[data-variable]").each(function() {
            return palette.push($(this).data("variable"));
          });
          return palette.unique();
        };
        func_colors = get_colors(func);
        _results = [];
        for (_l = 0, _len2 = func_colors.length; _l < _len2; _l++) {
          color = func_colors[_l];
          app_items = app.find("[data-variable='" + color + "']").andSelf().filter("[data-variable='" + color + "']");
          if (app_items.length) {
            if (!speed) {
              alert("Règle de la couleur !(Color rule)");
            }
            app_colors = get_colors(app);
            used_colors = (func_colors.concat(app_colors.concat(ahead_color))).unique();
            difference = (function() {
              var _len3, _m, _results1;
              _results1 = [];
              for (_m = 0, _len3 = color_tab.length; _m < _len3; _m++) {
                item = color_tab[_m];
                if (__indexOf.call(used_colors, item) < 0) {
                  _results1.push(item);
                }
              }
              return _results1;
            })();
            difference = difference.slice(0, +(app_colors.length - 1) + 1 || 9e9);
            for (index = _m = 0, _len3 = difference.length; _m < _len3; index = ++_m) {
              new_color = difference[index];
              app.find("[data-variable=" + app_colors[index] + "]").andSelf().filter("[data-variable=" + app_colors[index] + "]").each(function() {
                var _ref3;
                if (_ref3 = $(this).attr("data-variable"), __indexOf.call(ahead_color, _ref3) < 0) {
                  $(this).attr("data-variable", new_color);
                  return $(this).find(".skin").css("fill", new_color);
                }
              });
            }
            if (!speed) {
              alert("C'est vu ?");
            }
            break;
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };
      application = pointer.next();
      color_rule_check(pointer, application);
      applicationClone = application.clone();
      bust_a_move = function(p, timer) {
        var bustit, j, k;
        j = 0;
        k = 1;
        bustit = interval(10, function() {
          j = j + k;
          if (j < -15) {
            k = 1;
          }
          if (j > 0) {
            k = -1;
          }
          return p.children("svg").css({
            "z-index": "9000"
          }).find("#jaw").attr("transform", "rotate(" + j + ") translate(-100,20)");
        });
        return delay(timer, function() {
          clearInterval(bustit);
          return pointer.children("svg").find("g#layer1").attr("transform", "rotate(180 125 75)");
        });
      };
      bust_a_move(pointer, delta);
      return application.css('visibility', 'hidden').clone().prependTo(pointer).css({
        "z-index": "-1",
        border: "dashed black 10px",
        visibility: "visible",
        position: "absolute",
        top: "0px",
        left: "100%"
      }).animate({
        "min-width": "0px",
        padding: "0px",
        height: '50px',
        width: "50px",
        top: "50px",
        left: "70%"
      }, delta, function() {
        var eggs, n, removal;
        removal = function(myNode) {
          while (myNode.firstChild) {
            myNode.removeChild(myNode.firstChild);
          }
          return myNode.remove();
        };
        $(this).remove();
        application.remove();
        eggs = pointer.find(".variable[data-variable=" + variable + "]");
        n = eggs.length;
        if (n > 0) {
          return eggs.each(function(index, element) {
            $(this).after(applicationClone.clone().css({
              opacity: 0
            }).animate({
              opacity: 1
            }, delta, function() {
              if (index === n - 1) {
                return pointer.children().unwrap().siblings("svg").remove();
              }
            }));
            return $(this).animate({
              opacity: 0
            }, delta, function() {
              return $(this).remove();
            });
          });
        } else {
          if (!speed) {
            alert("Aucun oeuf !(no egg)");
          }
          return pointer.children().unwrap().siblings("svg").remove();
        }
      });
    });
    _ref3 = ["", 0], expression = _ref3[0], parentheses = _ref3[1];
    $(".panel-button").on("click", function() {
      var e, variable, _ref4, _results;
      switch ($(this).data("type")) {
        case "lambda":
          variable = $(this).data("variable");
          expression += "<div id='" + (id++) + "' style='background: url(css/img/alligator-" + var_tab[variable] + ".png) top center no-repeat;' class='lambda dropped' data-variable='" + var_tab[variable] + "'>";
          $("#prompt").val($("#prompt").val() + ("(λ" + variable + "."));
          return parentheses += 1;
        case "variable":
          variable = $(this).data("variable");
          expression += "<div id='" + (id++) + "' style='background: url(css/img/egg-" + var_tab[variable] + ".png) top center no-repeat;' class='variable dropped' data-variable='" + var_tab[variable] + "'></div>";
          return $("#prompt").val($("#prompt").val() + (" " + variable + " "));
        case "open":
          expression += "<div id='" + (id++) + "' style='background: url(css/img/alligator-white.png) top center no-repeat;' class='lambda dropped' data-variable='white'>";
          $("#prompt").val($("#prompt").val() + "(");
          return parentheses += 1;
        case "close":
          expression += "</div>";
          $("#prompt").val($("#prompt").val() + ")");
          return parentheses -= 1;
        case "go":
          return $("#root").empty().append(expression);
        case "clear":
          _ref4 = ["", 0], expression = _ref4[0], parentheses = _ref4[1];
          $("#root").empty().append("<div id='root_definition' class='definition_drop'></div>");
          make_dropped_droppable();
          return $("#prompt").val("");
        case "exemple":
          $("#prompt").val(lambda_exemples[$(this).data("numero")]);
          e = jQuery.Event("keypress");
          e.which = 13;
          return $('#prompt').trigger(e);
        case "autoclose":
          _results = [];
          while (parentheses) {
            expression += "</div>";
            $("#prompt").val($("#prompt").val() + ")");
            _results.push(parentheses -= 1);
          }
          return _results;
          break;
        case "speed":
          if ($(this).data("speed")) {
            speed = false;
            $(this).data("speed", false);
            return $(this).html("Go Slow");
          } else {
            speed = true;
            $(this).data("speed", true);
            return $(this).html("Go Fast");
          }
      }
    });
    inserer_direct = function(type, droppable, mode) {
      var lambda, variable;
      variable = type === "lambda priorite" ? 'white' : $("#choose-color").attr("data-color");
      lambda = "<div id='" + (id++) + "' class='" + type + " dropped' data-variable='" + variable + "' ></div>";
      lambda = $('<div/>').html(lambda).contents();
      switch (type) {
        case "variable":
          $("#egg-svg").find(".skin").css("fill", variable);
          $("#egg-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda":
          $("#open-svg").find(".skin").css("fill", variable);
          $("#open-svg").clone().contents().prependTo($(lambda));
          break;
        case "lambda priorite":
          $("#vieux-svg").clone().contents().prependTo($(lambda));
      }
      if (mode === "definition") {
        return droppable.append($(lambda));
      } else {
        return droppable.after($(lambda));
      }
    };
    $('#prompt').keypress(function(e) {
      var classe, exp, first, local_debug, object, pointer, previous, push_next, symbol, type, _l, _ref4;
      local_debug = false;
      key = e.which;
      if (key === 13) {
        $("#root").empty();
        exp = $("#prompt").val();
        pointer = $("#root");
        if (local_debug) {
          alert("start: " + pointer.attr("id"));
        }
        first = true;
        parentheses = [];
        symbol = "";
        previous = "none";
        push_next = false;
        for (i = _l = 0, _ref4 = exp.length - 1; 0 <= _ref4 ? _l <= _ref4 : _l >= _ref4; i = 0 <= _ref4 ? ++_l : --_l) {
          symbol += exp[i];
          if (local_debug) {
            alert(symbol);
          }
          switch (symbol) {
            case "(":
            case "λa.":
            case "λb.":
            case "λc.":
            case "λd.":
            case "λe.":
            case "λf.":
            case "λg.":
            case "λh.":
            case "λi.":
            case "λj.":
            case "λk.":
            case "λl.":
            case "λm.":
            case "λn.":
            case "λo.":
            case "λp.":
            case "λq.":
            case "λr.":
            case "λs.":
            case "λt.":
            case "λu.":
            case "λv.":
            case "λw.":
            case "λx.":
            case "λy.":
            case "λz.":
            case "a":
            case "b":
            case "c":
            case "d":
            case "e":
            case "f":
            case "g":
            case "h":
            case "i":
            case "j":
            case "k":
            case "l":
            case "m":
            case "n":
            case "o":
            case "p":
            case "q":
            case "r":
            case "s":
            case "t":
            case "u":
            case "v":
            case "w":
            case "x":
            case "y":
            case "z":
              if (symbol === "(") {
                if (")λa.λb.λc.λd.λe.λf.λg.λh.λi.λj.λk.λl.λm.λn.λo.λp.λq.λr.λs.λt.λu.λv.λw.λx.λy.λz.none".indexOf(previous > -1)) {
                  if (previous === "(") {
                    push_next = true;
                  }
                  parentheses.push("skip");
                  if (local_debug) {
                    alert("pushed 'skip' (");
                  }
                  symbol = "";
                  continue;
                }
                $("#choose-color").attr("data-color", "white");
                type = "lambda priorite";
                classe = ".lambda.priorite";
              } else if (ALPHABET.indexOf(symbol) > -1) {
                $("#choose-color").attr("data-color", var_tab[symbol[0]]);
                type = "variable";
                classe = ".variable";
              } else {
                $("#choose-color").attr("data-color", var_tab[symbol[1]]);
                type = "lambda";
                classe = ".lambda";
              }
              if (local_debug) {
                alert("previous is : " + previous);
              }
              switch (previous) {
                case "(":
                case "λa.":
                case "λb.":
                case "λc.":
                case "λd.":
                case "λe.":
                case "λf.":
                case "λg.":
                case "λh.":
                case "λi.":
                case "λj.":
                case "λk.":
                case "λl.":
                case "λm.":
                case "λn.":
                case "λo.":
                case "λp.":
                case "λq.":
                case "λr.":
                case "λs.":
                case "λt.":
                case "λu.":
                case "λv.":
                case "λw.":
                case "λx.":
                case "λy.":
                case "λz.":
                  if (local_debug) {
                    alert("1");
                  }
                  inserer_direct(type, pointer, "definition");
                  pointer = pointer.children(classe).first();
                  if (local_debug) {
                    alert("new pointer is:" + pointer.attr("id"));
                  }
                  break;
                case ")":
                  if (local_debug) {
                    alert("2 ");
                  }
                  inserer_direct(type, pointer, "application");
                  pointer = pointer.next(classe);
                  if (local_debug) {
                    alert("new pointer is:" + pointer.attr("id"));
                  }
                  break;
                default:
                  if (first) {
                    if (local_debug) {
                      alert("3");
                    }
                    inserer_direct(type, pointer, "definition");
                    pointer = pointer.find(classe).first();
                    if (local_debug) {
                      alert("new pointer is:" + pointer.attr("id"));
                    }
                    if (push_next) {
                      alert("4");
                      parentheses.push(pointer);
                      if (local_debug) {
                        alert("pointer was pushed :" + pointer.attr("id"));
                      }
                      push_next = false;
                    }
                    first = false;
                  } else {
                    if (local_debug) {
                      alert("5");
                    }
                    inserer_direct(type, pointer, "application");
                    pointer = pointer.next(classe);
                    if (local_debug) {
                      alert("new pointer is:" + pointer.attr("id"));
                    }
                    if (push_next) {
                      if (local_debug) {
                        alert("6");
                      }
                      parentheses.push(pointer);
                      if (local_debug) {
                        alert("pointer was pushed :" + pointer.attr("id"));
                      }
                      push_next = false;
                    }
                  }
              }
              if (symbol === "(") {
                parentheses.push(pointer);
                pointer = pointer.children(":not(svg)").first();
                if (local_debug) {
                  alert("pushed pointer:" + pointer.attr("id"));
                }
              }
              previous = symbol;
              symbol = "";
              break;
            case ")":
              object = parentheses.pop();
              if (object !== "skip") {
                pointer = object;
              } else {
                pointer = $("#root").children(":last");
              }
              previous = symbol;
              symbol = "";
              if (local_debug) {
                alert(") pointer is:" + pointer.attr("id"));
              }
              break;
            case " ":
              symbol = "";
              continue;
            default:
              continue;
          }
          if (local_debug) {
            alert("parentheses stack : " + parentheses);
          }
        }
        return false;
      }
    });
    return $(".run-previous-code").on("click", function() {
      var js;
      js = CoffeeScript.compile($(this).prev(":first").text());
      return eval(js);
    });
  });

}).call(this);
